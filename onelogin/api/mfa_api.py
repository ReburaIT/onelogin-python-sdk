# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onelogin.api_client import ApiClient


class MfaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_user_mfa_device(self, id, device_id, **kwargs):  # noqa: E501
        """Activate an authentication factor  # noqa: E501

        Use this API to trigger an SMS or Push notification containing a One-Time Password (OTP) that can be used to authenticate a user with the Verify Factor call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_user_mfa_device(id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param int device_id: Device ID (required)
        :return: EnrollMfaDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_user_mfa_device_with_http_info(id, device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_user_mfa_device_with_http_info(id, device_id, **kwargs)  # noqa: E501
            return data

    def activate_user_mfa_device_with_http_info(self, id, device_id, **kwargs):  # noqa: E501
        """Activate an authentication factor  # noqa: E501

        Use this API to trigger an SMS or Push notification containing a One-Time Password (OTP) that can be used to authenticate a user with the Verify Factor call.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_user_mfa_device_with_http_info(id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param int device_id: Device ID (required)
        :return: EnrollMfaDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_user_mfa_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `activate_user_mfa_device`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `activate_user_mfa_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/{id}/otp_devices/{device_id}/trigger', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollMfaDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user_mfa_device(self, id, device_id, **kwargs):  # noqa: E501
        """Remove an authentication device  # noqa: E501

        Use this API to remove an enrolled factor from a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_mfa_device(id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param int device_id: Device ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_mfa_device_with_http_info(id, device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_mfa_device_with_http_info(id, device_id, **kwargs)  # noqa: E501
            return data

    def delete_user_mfa_device_with_http_info(self, id, device_id, **kwargs):  # noqa: E501
        """Remove an authentication device  # noqa: E501

        Use this API to remove an enrolled factor from a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_mfa_device_with_http_info(id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param int device_id: Device ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'device_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user_mfa_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_user_mfa_device`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `delete_user_mfa_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/{id}/otp_devices/{device_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enroll_user_mfa_device(self, id, **kwargs):  # noqa: E501
        """Enroll a user with a given authentication factor.  # noqa: E501

        If the authentication factor requires confirmation to complete, then the device will have an active state of false otherwise it will have an active state of true (corresponding to devices that are either pending confirmation or not)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_user_mfa_device(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param EnrollMfaDeviceRequest enroll_mfa_device_request:
        :return: EnrollMfaDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enroll_user_mfa_device_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.enroll_user_mfa_device_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def enroll_user_mfa_device_with_http_info(self, id, **kwargs):  # noqa: E501
        """Enroll a user with a given authentication factor.  # noqa: E501

        If the authentication factor requires confirmation to complete, then the device will have an active state of false otherwise it will have an active state of true (corresponding to devices that are either pending confirmation or not)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_user_mfa_device_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param EnrollMfaDeviceRequest enroll_mfa_device_request:
        :return: EnrollMfaDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'enroll_mfa_device_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enroll_user_mfa_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `enroll_user_mfa_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'enroll_mfa_device_request' in params:
            body_params = params['enroll_mfa_device_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/{id}/otp_devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollMfaDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_available_mfa_factors(self, id, **kwargs):  # noqa: E501
        """Get a list of MFA factors available to user  # noqa: E501

        Use this API to return a list of authentication factors that are available for user enrollment via API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_available_mfa_factors(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :return: UserMfaFactorsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_available_mfa_factors_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_available_mfa_factors_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_available_mfa_factors_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of MFA factors available to user  # noqa: E501

        Use this API to return a list of authentication factors that are available for user enrollment via API  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_available_mfa_factors_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :return: UserMfaFactorsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_available_mfa_factors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_user_available_mfa_factors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/{id}/auth_factors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserMfaFactorsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_enrolled_mfa_devices(self, id, **kwargs):  # noqa: E501
        """Get enrolled authentication devices  # noqa: E501

        Use this API to return a list of authentication factors registered to a particular user for multifactor authentication (MFA).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_enrolled_mfa_devices(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :return: EnrolledMfaDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_enrolled_mfa_devices_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_enrolled_mfa_devices_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_user_enrolled_mfa_devices_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get enrolled authentication devices  # noqa: E501

        Use this API to return a list of authentication factors registered to a particular user for multifactor authentication (MFA).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_enrolled_mfa_devices_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :return: EnrolledMfaDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_enrolled_mfa_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_user_enrolled_mfa_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/{id}/otp_devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrolledMfaDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_user_mfa_device(self, id, device_id, **kwargs):  # noqa: E501
        """Verify an authentication device  # noqa: E501

        Use this API to authenticate a one-time password (OTP) code provided by a multifactor authentication (MFA) device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_user_mfa_device(id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param int device_id: Device ID (required)
        :param VerifyMfaDeviceRequest verify_mfa_device_request:
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_user_mfa_device_with_http_info(id, device_id, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_user_mfa_device_with_http_info(id, device_id, **kwargs)  # noqa: E501
            return data

    def verify_user_mfa_device_with_http_info(self, id, device_id, **kwargs):  # noqa: E501
        """Verify an authentication device  # noqa: E501

        Use this API to authenticate a one-time password (OTP) code provided by a multifactor authentication (MFA) device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_user_mfa_device_with_http_info(id, device_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: User ID (required)
        :param int device_id: Device ID (required)
        :param VerifyMfaDeviceRequest verify_mfa_device_request:
        :return: Status
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'device_id', 'verify_mfa_device_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_user_mfa_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `verify_user_mfa_device`")  # noqa: E501
        # verify the required parameter 'device_id' is set
        if self.api_client.client_side_validation and ('device_id' not in params or
                                                       params['device_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `device_id` when calling `verify_user_mfa_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'device_id' in params:
            path_params['device_id'] = params['device_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'verify_mfa_device_request' in params:
            body_params = params['verify_mfa_device_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/users/{id}/otp_devices/{device_id}/verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Status',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
