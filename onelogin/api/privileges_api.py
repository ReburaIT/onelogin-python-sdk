# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onelogin.api_client import ApiClient


class PrivilegesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_privilege_roles(self, id, assign_privilege_roles_request, **kwargs):  # noqa: E501
        """Assign roles  # noqa: E501

        Use this API to assign a privilege to one or more roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_privilege_roles(id, assign_privilege_roles_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param AssignPrivilegeRolesRequest assign_privilege_roles_request: Roles (required)
        :return: AssignPrivilegeRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_privilege_roles_with_http_info(id, assign_privilege_roles_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_privilege_roles_with_http_info(id, assign_privilege_roles_request, **kwargs)  # noqa: E501
            return data

    def add_privilege_roles_with_http_info(self, id, assign_privilege_roles_request, **kwargs):  # noqa: E501
        """Assign roles  # noqa: E501

        Use this API to assign a privilege to one or more roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_privilege_roles_with_http_info(id, assign_privilege_roles_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param AssignPrivilegeRolesRequest assign_privilege_roles_request: Roles (required)
        :return: AssignPrivilegeRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'assign_privilege_roles_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_privilege_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_privilege_roles`")  # noqa: E501
        # verify the required parameter 'assign_privilege_roles_request' is set
        if self.api_client.client_side_validation and ('assign_privilege_roles_request' not in params or
                                                       params['assign_privilege_roles_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assign_privilege_roles_request` when calling `add_privilege_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assign_privilege_roles_request' in params:
            body_params = params['assign_privilege_roles_request']
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignPrivilegeRolesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_privilege_users(self, id, assign_privilege_users_request, **kwargs):  # noqa: E501
        """Assign users  # noqa: E501

        Use this API to assign a privilege to one or more users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_privilege_users(id, assign_privilege_users_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param AssignPrivilegeUsersRequest assign_privilege_users_request: Users (required)
        :return: AssignPrivilegeRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_privilege_users_with_http_info(id, assign_privilege_users_request, **kwargs)  # noqa: E501
        else:
            (data) = self.add_privilege_users_with_http_info(id, assign_privilege_users_request, **kwargs)  # noqa: E501
            return data

    def add_privilege_users_with_http_info(self, id, assign_privilege_users_request, **kwargs):  # noqa: E501
        """Assign users  # noqa: E501

        Use this API to assign a privilege to one or more users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_privilege_users_with_http_info(id, assign_privilege_users_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param AssignPrivilegeUsersRequest assign_privilege_users_request: Users (required)
        :return: AssignPrivilegeRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'assign_privilege_users_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_privilege_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_privilege_users`")  # noqa: E501
        # verify the required parameter 'assign_privilege_users_request' is set
        if self.api_client.client_side_validation and ('assign_privilege_users_request' not in params or
                                                       params['assign_privilege_users_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assign_privilege_users_request` when calling `add_privilege_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'assign_privilege_users_request' in params:
            body_params = params['assign_privilege_users_request']
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}/users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignPrivilegeRolesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_privilege(self, **kwargs):  # noqa: E501
        """Creates privilege  # noqa: E501

        Creates a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Privilege privilege:
        :return: CreatePrivilegeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_privilege_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_privilege_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_privilege_with_http_info(self, **kwargs):  # noqa: E501
        """Creates privilege  # noqa: E501

        Creates a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_privilege_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Privilege privilege:
        :return: CreatePrivilegeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['privilege']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_privilege" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'privilege' in params:
            body_params = params['privilege']
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePrivilegeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_privilege(self, id, **kwargs):  # noqa: E501
        """Delete privilege  # noqa: E501

        Delete a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_privilege(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_privilege_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_privilege_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_privilege_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete privilege  # noqa: E501

        Delete a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_privilege_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_privilege`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_privilege(self, id, **kwargs):  # noqa: E501
        """Get privilege  # noqa: E501

        Get a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_privilege_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_privilege_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_privilege_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get privilege  # noqa: E501

        Get a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_privilege`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_privilege_roles(self, id, **kwargs):  # noqa: E501
        """Get roles  # noqa: E501

        Get roles assigned to a privilege    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege_roles(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: PrivilegeRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_privilege_roles_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_privilege_roles_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_privilege_roles_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get roles  # noqa: E501

        Get roles assigned to a privilege    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege_roles_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: PrivilegeRolesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privilege_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_privilege_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivilegeRolesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_privilege_users(self, id, **kwargs):  # noqa: E501
        """Get privilege users  # noqa: E501

        Get users assigned to a privilege    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege_users(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: PrivilegeUsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_privilege_users_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_privilege_users_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_privilege_users_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get privilege users  # noqa: E501

        Get users assigned to a privilege    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privilege_users_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :return: PrivilegeUsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privilege_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_privilege_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrivilegeUsersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_privileges(self, **kwargs):  # noqa: E501
        """Get Privileges  # noqa: E501

        Use this API to list the Privileges created in an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privileges(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Privilege]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_privileges_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_privileges_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_privileges_with_http_info(self, **kwargs):  # noqa: E501
        """Get Privileges  # noqa: E501

        Use this API to list the Privileges created in an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_privileges_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Privilege]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_privileges" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Privilege]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_privilege_role(self, id, role_id, **kwargs):  # noqa: E501
        """Remove a role  # noqa: E501

        Use this API to remove a single role from a privilege.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_privilege_role(id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param int role_id: Role ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_privilege_role_with_http_info(id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_privilege_role_with_http_info(id, role_id, **kwargs)  # noqa: E501
            return data

    def remove_privilege_role_with_http_info(self, id, role_id, **kwargs):  # noqa: E501
        """Remove a role  # noqa: E501

        Use this API to remove a single role from a privilege.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_privilege_role_with_http_info(id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param int role_id: Role ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_privilege_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_privilege_role`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and ('role_id' not in params or
                                                       params['role_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_id` when calling `remove_privilege_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}/roles/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_privlege_user(self, id, user_id, **kwargs):  # noqa: E501
        """Remove a user  # noqa: E501

        Use this API to remove a single user from a privilege.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_privlege_user(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param int user_id: User ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_privlege_user_with_http_info(id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_privlege_user_with_http_info(id, user_id, **kwargs)  # noqa: E501
            return data

    def remove_privlege_user_with_http_info(self, id, user_id, **kwargs):  # noqa: E501
        """Remove a user  # noqa: E501

        Use this API to remove a single user from a privilege.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_privlege_user_with_http_info(id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param int user_id: User ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_privlege_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_privlege_user`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `remove_privlege_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}/users/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_privilege(self, id, **kwargs):  # noqa: E501
        """Update privilege  # noqa: E501

        Update a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param Privilege update_privilege_request:
        :return: CreatePrivilegeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_privilege_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_privilege_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_privilege_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update privilege  # noqa: E501

        Update a privilege      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_privilege_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Privilege ID (required)
        :param Privilege update_privilege_request:
        :return: CreatePrivilegeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'update_privilege_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_privilege" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_privilege`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_privilege_request' in params:
            body_params = params['update_privilege_request']
        # Authentication setting
        auth_settings = ['application']  # noqa: E501

        return self.api_client.call_api(
            '/1/privileges/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatePrivilegeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
