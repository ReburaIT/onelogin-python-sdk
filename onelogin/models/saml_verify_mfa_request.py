# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class SamlVerifyMfaRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_id': 'int',
        'device_id': 'int',
        'state_token': 'str',
        'otp_token': 'str',
        'do_not_notify': 'bool'
    }

    attribute_map = {
        'app_id': 'app_id',
        'device_id': 'device_id',
        'state_token': 'state_token',
        'otp_token': 'otp_token',
        'do_not_notify': 'do_not_notify'
    }

    def __init__(self, app_id=None, device_id=None, state_token=None, otp_token=None, do_not_notify=False, _configuration=None):  # noqa: E501
        """SamlVerifyMfaRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_id = None
        self._device_id = None
        self._state_token = None
        self._otp_token = None
        self._do_not_notify = None
        self.discriminator = None

        self.app_id = app_id
        self.device_id = device_id
        self.state_token = state_token
        if otp_token is not None:
            self.otp_token = otp_token
        if do_not_notify is not None:
            self.do_not_notify = do_not_notify

    @property
    def app_id(self):
        """Gets the app_id of this SamlVerifyMfaRequest.  # noqa: E501

        Provide the MFA device_id you are submitting for verification.  # noqa: E501

        :return: The app_id of this SamlVerifyMfaRequest.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this SamlVerifyMfaRequest.

        Provide the MFA device_id you are submitting for verification.  # noqa: E501

        :param app_id: The app_id of this SamlVerifyMfaRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def device_id(self):
        """Gets the device_id of this SamlVerifyMfaRequest.  # noqa: E501

        Provide the MFA device_id you are submitting for verification.  # noqa: E501

        :return: The device_id of this SamlVerifyMfaRequest.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this SamlVerifyMfaRequest.

        Provide the MFA device_id you are submitting for verification.  # noqa: E501

        :param device_id: The device_id of this SamlVerifyMfaRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def state_token(self):
        """Gets the state_token of this SamlVerifyMfaRequest.  # noqa: E501

        Provide the state_token associated with the MFA device_id you are submitting for verification.  # noqa: E501

        :return: The state_token of this SamlVerifyMfaRequest.  # noqa: E501
        :rtype: str
        """
        return self._state_token

    @state_token.setter
    def state_token(self, state_token):
        """Sets the state_token of this SamlVerifyMfaRequest.

        Provide the state_token associated with the MFA device_id you are submitting for verification.  # noqa: E501

        :param state_token: The state_token of this SamlVerifyMfaRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and state_token is None:
            raise ValueError("Invalid value for `state_token`, must not be `None`")  # noqa: E501

        self._state_token = state_token

    @property
    def otp_token(self):
        """Gets the otp_token of this SamlVerifyMfaRequest.  # noqa: E501

        Provide the OTP value for the MFA factor you are submitting for verification.  # noqa: E501

        :return: The otp_token of this SamlVerifyMfaRequest.  # noqa: E501
        :rtype: str
        """
        return self._otp_token

    @otp_token.setter
    def otp_token(self, otp_token):
        """Sets the otp_token of this SamlVerifyMfaRequest.

        Provide the OTP value for the MFA factor you are submitting for verification.  # noqa: E501

        :param otp_token: The otp_token of this SamlVerifyMfaRequest.  # noqa: E501
        :type: str
        """

        self._otp_token = otp_token

    @property
    def do_not_notify(self):
        """Gets the do_not_notify of this SamlVerifyMfaRequest.  # noqa: E501

        When verifying MFA via Protect Push, set this to true to stop additional push notifications being sent to the OneLogin Protect device.  # noqa: E501

        :return: The do_not_notify of this SamlVerifyMfaRequest.  # noqa: E501
        :rtype: bool
        """
        return self._do_not_notify

    @do_not_notify.setter
    def do_not_notify(self, do_not_notify):
        """Sets the do_not_notify of this SamlVerifyMfaRequest.

        When verifying MFA via Protect Push, set this to true to stop additional push notifications being sent to the OneLogin Protect device.  # noqa: E501

        :param do_not_notify: The do_not_notify of this SamlVerifyMfaRequest.  # noqa: E501
        :type: bool
        """

        self._do_not_notify = do_not_notify

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamlVerifyMfaRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamlVerifyMfaRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SamlVerifyMfaRequest):
            return True

        return self.to_dict() != other.to_dict()
