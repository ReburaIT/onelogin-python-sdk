# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class Statement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'effect': 'str',
        'action': 'list[Action]',
        'scope': 'list[Scope]'
    }

    attribute_map = {
        'effect': 'Effect',
        'action': 'Action',
        'scope': 'Scope'
    }

    def __init__(self, effect=None, action=None, scope=None, _configuration=None):  # noqa: E501
        """Statement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._effect = None
        self._action = None
        self._scope = None
        self.discriminator = None

        self.effect = effect
        self.action = action
        self.scope = scope

    @property
    def effect(self):
        """Gets the effect of this Statement.  # noqa: E501


        :return: The effect of this Statement.  # noqa: E501
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this Statement.


        :param effect: The effect of this Statement.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and effect is None:
            raise ValueError("Invalid value for `effect`, must not be `None`")  # noqa: E501
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if (self._configuration.client_side_validation and
                effect not in allowed_values):
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"  # noqa: E501
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def action(self):
        """Gets the action of this Statement.  # noqa: E501


        :return: The action of this Statement.  # noqa: E501
        :rtype: list[Action]
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Statement.


        :param action: The action of this Statement.  # noqa: E501
        :type: list[Action]
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def scope(self):
        """Gets the scope of this Statement.  # noqa: E501


        :return: The scope of this Statement.  # noqa: E501
        :rtype: list[Scope]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Statement.


        :param scope: The scope of this Statement.  # noqa: E501
        :type: list[Scope]
        """
        if self._configuration.client_side_validation and scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Statement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Statement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Statement):
            return True

        return self.to_dict() != other.to_dict()
