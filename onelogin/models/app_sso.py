# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class AppSso(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'metadata_url': 'str',
        'acs_url': 'str',
        'sls_url': 'str',
        'issuer': 'str',
        'certificate': 'AppSsoCertificate'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'metadata_url': 'metadata_url',
        'acs_url': 'acs_url',
        'sls_url': 'sls_url',
        'issuer': 'issuer',
        'certificate': 'certificate'
    }

    def __init__(self, client_id=None, client_secret=None, metadata_url=None, acs_url=None, sls_url=None, issuer=None, certificate=None, _configuration=None):  # noqa: E501
        """AppSso - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id = None
        self._client_secret = None
        self._metadata_url = None
        self._acs_url = None
        self._sls_url = None
        self._issuer = None
        self._certificate = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if metadata_url is not None:
            self.metadata_url = metadata_url
        if acs_url is not None:
            self.acs_url = acs_url
        if sls_url is not None:
            self.sls_url = sls_url
        if issuer is not None:
            self.issuer = issuer
        if certificate is not None:
            self.certificate = certificate

    @property
    def client_id(self):
        """Gets the client_id of this AppSso.  # noqa: E501


        :return: The client_id of this AppSso.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AppSso.


        :param client_id: The client_id of this AppSso.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this AppSso.  # noqa: E501


        :return: The client_secret of this AppSso.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AppSso.


        :param client_secret: The client_secret of this AppSso.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def metadata_url(self):
        """Gets the metadata_url of this AppSso.  # noqa: E501


        :return: The metadata_url of this AppSso.  # noqa: E501
        :rtype: str
        """
        return self._metadata_url

    @metadata_url.setter
    def metadata_url(self, metadata_url):
        """Sets the metadata_url of this AppSso.


        :param metadata_url: The metadata_url of this AppSso.  # noqa: E501
        :type: str
        """

        self._metadata_url = metadata_url

    @property
    def acs_url(self):
        """Gets the acs_url of this AppSso.  # noqa: E501


        :return: The acs_url of this AppSso.  # noqa: E501
        :rtype: str
        """
        return self._acs_url

    @acs_url.setter
    def acs_url(self, acs_url):
        """Sets the acs_url of this AppSso.


        :param acs_url: The acs_url of this AppSso.  # noqa: E501
        :type: str
        """

        self._acs_url = acs_url

    @property
    def sls_url(self):
        """Gets the sls_url of this AppSso.  # noqa: E501


        :return: The sls_url of this AppSso.  # noqa: E501
        :rtype: str
        """
        return self._sls_url

    @sls_url.setter
    def sls_url(self, sls_url):
        """Sets the sls_url of this AppSso.


        :param sls_url: The sls_url of this AppSso.  # noqa: E501
        :type: str
        """

        self._sls_url = sls_url

    @property
    def issuer(self):
        """Gets the issuer of this AppSso.  # noqa: E501


        :return: The issuer of this AppSso.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this AppSso.


        :param issuer: The issuer of this AppSso.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def certificate(self):
        """Gets the certificate of this AppSso.  # noqa: E501


        :return: The certificate of this AppSso.  # noqa: E501
        :rtype: AppSsoCertificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this AppSso.


        :param certificate: The certificate of this AppSso.  # noqa: E501
        :type: AppSsoCertificate
        """

        self._certificate = certificate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppSso, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppSso):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppSso):
            return True

        return self.to_dict() != other.to_dict()
