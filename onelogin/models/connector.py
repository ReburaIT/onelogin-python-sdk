# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class Connector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'icon_url': 'str',
        'auth_method': 'int',
        'allows_new_parameters': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'icon_url': 'icon_url',
        'auth_method': 'auth_method',
        'allows_new_parameters': 'allows_new_parameters'
    }

    def __init__(self, id=None, name=None, icon_url=None, auth_method=None, allows_new_parameters=None, _configuration=None):  # noqa: E501
        """Connector - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._icon_url = None
        self._auth_method = None
        self._allows_new_parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if icon_url is not None:
            self.icon_url = icon_url
        if auth_method is not None:
            self.auth_method = auth_method
        if allows_new_parameters is not None:
            self.allows_new_parameters = allows_new_parameters

    @property
    def id(self):
        """Gets the id of this Connector.  # noqa: E501


        :return: The id of this Connector.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connector.


        :param id: The id of this Connector.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Connector.  # noqa: E501


        :return: The name of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.


        :param name: The name of this Connector.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon_url(self):
        """Gets the icon_url of this Connector.  # noqa: E501


        :return: The icon_url of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this Connector.


        :param icon_url: The icon_url of this Connector.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def auth_method(self):
        """Gets the auth_method of this Connector.  # noqa: E501


        :return: The auth_method of this Connector.  # noqa: E501
        :rtype: int
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this Connector.


        :param auth_method: The auth_method of this Connector.  # noqa: E501
        :type: int
        """

        self._auth_method = auth_method

    @property
    def allows_new_parameters(self):
        """Gets the allows_new_parameters of this Connector.  # noqa: E501


        :return: The allows_new_parameters of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._allows_new_parameters

    @allows_new_parameters.setter
    def allows_new_parameters(self, allows_new_parameters):
        """Sets the allows_new_parameters of this Connector.


        :param allows_new_parameters: The allows_new_parameters of this Connector.  # noqa: E501
        :type: bool
        """

        self._allows_new_parameters = allows_new_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Connector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Connector):
            return True

        return self.to_dict() != other.to_dict()
