# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class App(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'visible': 'bool',
        'description': 'str',
        'notes': 'str',
        'icon_url': 'str',
        'auth_method': 'int',
        'policy_id': 'int',
        'allow_assumed_signin': 'bool',
        'tab_id': 'int',
        'connector_id': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'provisioning': 'AppProvisioning',
        'sso': 'AppSso',
        'configuration': 'AppConfiguration',
        'parameters': 'dict(str, AppParameters)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'visible': 'visible',
        'description': 'description',
        'notes': 'notes',
        'icon_url': 'icon_url',
        'auth_method': 'auth_method',
        'policy_id': 'policy_id',
        'allow_assumed_signin': 'allow_assumed_signin',
        'tab_id': 'tab_id',
        'connector_id': 'connector_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'provisioning': 'provisioning',
        'sso': 'sso',
        'configuration': 'configuration',
        'parameters': 'parameters'
    }

    def __init__(self, id=None, name=None, visible=None, description=None, notes=None, icon_url=None, auth_method=None, policy_id=None, allow_assumed_signin=None, tab_id=None, connector_id=None, created_at=None, updated_at=None, provisioning=None, sso=None, configuration=None, parameters=None, _configuration=None):  # noqa: E501
        """App - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._visible = None
        self._description = None
        self._notes = None
        self._icon_url = None
        self._auth_method = None
        self._policy_id = None
        self._allow_assumed_signin = None
        self._tab_id = None
        self._connector_id = None
        self._created_at = None
        self._updated_at = None
        self._provisioning = None
        self._sso = None
        self._configuration = None
        self._parameters = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if visible is not None:
            self.visible = visible
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes
        if icon_url is not None:
            self.icon_url = icon_url
        if auth_method is not None:
            self.auth_method = auth_method
        if policy_id is not None:
            self.policy_id = policy_id
        if allow_assumed_signin is not None:
            self.allow_assumed_signin = allow_assumed_signin
        if tab_id is not None:
            self.tab_id = tab_id
        if connector_id is not None:
            self.connector_id = connector_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if provisioning is not None:
            self.provisioning = provisioning
        if sso is not None:
            self.sso = sso
        if configuration is not None:
            self.configuration = configuration
        if parameters is not None:
            self.parameters = parameters

    @property
    def id(self):
        """Gets the id of this App.  # noqa: E501


        :return: The id of this App.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this App.


        :param id: The id of this App.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this App.  # noqa: E501


        :return: The name of this App.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.


        :param name: The name of this App.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def visible(self):
        """Gets the visible of this App.  # noqa: E501


        :return: The visible of this App.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this App.


        :param visible: The visible of this App.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def description(self):
        """Gets the description of this App.  # noqa: E501


        :return: The description of this App.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this App.


        :param description: The description of this App.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def notes(self):
        """Gets the notes of this App.  # noqa: E501


        :return: The notes of this App.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this App.


        :param notes: The notes of this App.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def icon_url(self):
        """Gets the icon_url of this App.  # noqa: E501


        :return: The icon_url of this App.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this App.


        :param icon_url: The icon_url of this App.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def auth_method(self):
        """Gets the auth_method of this App.  # noqa: E501


        :return: The auth_method of this App.  # noqa: E501
        :rtype: int
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this App.


        :param auth_method: The auth_method of this App.  # noqa: E501
        :type: int
        """

        self._auth_method = auth_method

    @property
    def policy_id(self):
        """Gets the policy_id of this App.  # noqa: E501


        :return: The policy_id of this App.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this App.


        :param policy_id: The policy_id of this App.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def allow_assumed_signin(self):
        """Gets the allow_assumed_signin of this App.  # noqa: E501


        :return: The allow_assumed_signin of this App.  # noqa: E501
        :rtype: bool
        """
        return self._allow_assumed_signin

    @allow_assumed_signin.setter
    def allow_assumed_signin(self, allow_assumed_signin):
        """Sets the allow_assumed_signin of this App.


        :param allow_assumed_signin: The allow_assumed_signin of this App.  # noqa: E501
        :type: bool
        """

        self._allow_assumed_signin = allow_assumed_signin

    @property
    def tab_id(self):
        """Gets the tab_id of this App.  # noqa: E501


        :return: The tab_id of this App.  # noqa: E501
        :rtype: int
        """
        return self._tab_id

    @tab_id.setter
    def tab_id(self, tab_id):
        """Sets the tab_id of this App.


        :param tab_id: The tab_id of this App.  # noqa: E501
        :type: int
        """

        self._tab_id = tab_id

    @property
    def connector_id(self):
        """Gets the connector_id of this App.  # noqa: E501


        :return: The connector_id of this App.  # noqa: E501
        :rtype: int
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this App.


        :param connector_id: The connector_id of this App.  # noqa: E501
        :type: int
        """

        self._connector_id = connector_id

    @property
    def created_at(self):
        """Gets the created_at of this App.  # noqa: E501


        :return: The created_at of this App.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this App.


        :param created_at: The created_at of this App.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this App.  # noqa: E501


        :return: The updated_at of this App.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this App.


        :param updated_at: The updated_at of this App.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def provisioning(self):
        """Gets the provisioning of this App.  # noqa: E501


        :return: The provisioning of this App.  # noqa: E501
        :rtype: AppProvisioning
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this App.


        :param provisioning: The provisioning of this App.  # noqa: E501
        :type: AppProvisioning
        """

        self._provisioning = provisioning

    @property
    def sso(self):
        """Gets the sso of this App.  # noqa: E501


        :return: The sso of this App.  # noqa: E501
        :rtype: AppSso
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this App.


        :param sso: The sso of this App.  # noqa: E501
        :type: AppSso
        """

        self._sso = sso

    @property
    def configuration(self):
        """Gets the configuration of this App.  # noqa: E501


        :return: The configuration of this App.  # noqa: E501
        :rtype: AppConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this App.


        :param configuration: The configuration of this App.  # noqa: E501
        :type: AppConfiguration
        """

        self._configuration = configuration

    @property
    def parameters(self):
        """Gets the parameters of this App.  # noqa: E501


        :return: The parameters of this App.  # noqa: E501
        :rtype: dict(str, AppParameters)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this App.


        :param parameters: The parameters of this App.  # noqa: E501
        :type: dict(str, AppParameters)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(App, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, App):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, App):
            return True

        return self.to_dict() != other.to_dict()
