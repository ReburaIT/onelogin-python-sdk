# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class Action(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    _ = "*"
    PRIVILEGES_LIST = "privileges:List"
    PRIVILEGES_GET = "privileges:Get"
    PRIVILEGES_CREATE = "privileges:Create"
    PRIVILEGES_UPDATE = "privileges:Update"
    PRIVILEGES_DELETE = "privileges:Delete"
    PRIVILEGES_LISTUSERS = "privileges:ListUsers"
    PRIVILEGES_LISTROLES = "privileges:ListRoles"
    PRIVILEGES_ADDUSER = "privileges:AddUser"
    PRIVILEGES_REMOVEUSER = "privileges:RemoveUser"
    PRIVILEGES_ADDROLE = "privileges:AddRole"
    PRIVILEGES_REMOVEROLE = "privileges:RemoveRole"
    ROLES_LIST = "roles:List"
    ROLES_GET = "roles:Get"
    ROLES_CREATE = "roles:Create"
    ROLES_UPDATE = "roles:Update"
    ROLES_DELETE = "roles:Delete"
    ROLES_ADDUSER = "roles:AddUser"
    ROLES_ADDAPP = "roles:AddApp"
    ROLES_REMOVEAPP = "roles:RemoveApp"
    DIRECTORIES_LIST = "directories:List"
    DIRECTORIES_GET = "directories:Get"
    DIRECTORIES_CREATE = "directories:Create"
    DIRECTORIES_UPDATE = "directories:Update"
    DIRECTORIES_DELETE = "directories:Delete"
    DIRECTORIES_SYNCUSERS = "directories:SyncUsers"
    DIRECTORIES_REFRESHSCHEMA = "directories:RefreshSchema"
    TRUSTEDIDP_LIST = "trustedidp:List"
    TRUSTEDIDP_GET = "trustedidp:Get"
    TRUSTEDIDP_CREATE = "trustedidp:Create"
    TRUSTEDIDP_UPDATE = "trustedidp:Update"
    TRUSTEDIDP_DELETE = "trustedidp:Delete"
    POLICIES_LIST = "policies:List"
    POLICIES_USER_GET = "policies:user:Get"
    POLICIES_USER_CREATE = "policies:user:Create"
    POLICIES_USER_UPDATE = "policies:user:Update"
    POLICIES_USER_DELETE = "policies:user:Delete"
    POLICIES_APP_GET = "policies:app:Get"
    POLICIES_APP_CREATE = "policies:app:Create"
    POLICIES_APP_UPDATE = "policies:app:Update"
    POLICIES_APP_DELETE = "policies:app:Delete"
    USERS_LIST = "users:List"
    USERS_GET = "users:Get"
    USERS_CREATE = "users:Create"
    USERS_UPDATE = "users:Update"
    USERS_DELETE = "users:Delete"
    USERS_UNLOCK = "users:Unlock"
    USERS_RESETPASSWORD = "users:ResetPassword"
    USERS_FORCELOGOUT = "users:ForceLogout"
    USERS_INVITE = "users:Invite"
    USERS_REAPPLYMAPPINGS = "users:ReapplyMappings"
    USERS_ADDROLE = "users:AddRole"
    USERS_REMOVEROLE = "users:RemoveRole"
    USERS_GENERATETEMPMFATOKEN = "users:GenerateTempMfaToken"
    USERS_ADDAPP = "users:AddApp"
    USERS_REMOVEAPP = "users:RemoveApp"
    APPS_LIST = "apps:List"
    APPS_GET = "apps:Get"
    APPS_CREATE = "apps:Create"
    APPS_UPDATECONFIGURATION = "apps:UpdateConfiguration"
    APPS_UPDATESSO = "apps:UpdateSSO"
    APPS_UPDATEPARAMETERS = "apps:UpdateParameters"
    APPS_DELETE = "apps:Delete"
    APPS_ADDUSER = "apps:AddUser"
    APPS_REMOVEUSER = "apps:RemoveUser"
    REPORTS_LIST = "reports:List"
    REPORTS_GET = "reports:Get"
    REPORTS_CREATE = "reports:Create"
    REPORTS_RUN = "reports:Run"
    MAPPINGS_REAPPLYALL = "mappings:reapplyAll"
    EVENTS_LIST = "events:List"
    EVENTS_GET = "events:Get"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self, _configuration=None):  # noqa: E501
        """Action - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Action, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Action):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Action):
            return True

        return self.to_dict() != other.to_dict()
