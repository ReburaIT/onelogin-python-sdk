# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'email': 'str',
        'username': 'str',
        'firstname': 'str',
        'lastname': 'str',
        'group_id': 'int',
        'invalid_login_attempts': 'int',
        'activated_at': 'datetime',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'invitation_sent_at': 'datetime',
        'password_changed_at': 'datetime',
        'last_login': 'datetime',
        'locked_until': 'datetime',
        'notes': 'str',
        'openid_name': 'str',
        'locale_code': 'str',
        'phone': 'str',
        'status': 'int',
        'state': 'int',
        'distinguished_name': 'str',
        'external_id': 'str',
        'directory_id': 'int',
        'member_of': 'str',
        'samaccountname': 'str',
        'userprincipalname': 'str',
        'manager_ad_id': 'str',
        'role_id': 'list[int]',
        'custom_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'username': 'username',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'group_id': 'group_id',
        'invalid_login_attempts': 'invalid_login_attempts',
        'activated_at': 'activated_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'invitation_sent_at': 'invitation_sent_at',
        'password_changed_at': 'password_changed_at',
        'last_login': 'last_login',
        'locked_until': 'locked_until',
        'notes': 'notes',
        'openid_name': 'openid_name',
        'locale_code': 'locale_code',
        'phone': 'phone',
        'status': 'status',
        'state': 'state',
        'distinguished_name': 'distinguished_name',
        'external_id': 'external_id',
        'directory_id': 'directory_id',
        'member_of': 'member_of',
        'samaccountname': 'samaccountname',
        'userprincipalname': 'userprincipalname',
        'manager_ad_id': 'manager_ad_id',
        'role_id': 'role_id',
        'custom_attributes': 'custom_attributes'
    }

    def __init__(self, id=None, email=None, username=None, firstname=None, lastname=None, group_id=None, invalid_login_attempts=None, activated_at=None, created_at=None, updated_at=None, invitation_sent_at=None, password_changed_at=None, last_login=None, locked_until=None, notes=None, openid_name=None, locale_code=None, phone=None, status=None, state=None, distinguished_name=None, external_id=None, directory_id=None, member_of=None, samaccountname=None, userprincipalname=None, manager_ad_id=None, role_id=None, custom_attributes=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._email = None
        self._username = None
        self._firstname = None
        self._lastname = None
        self._group_id = None
        self._invalid_login_attempts = None
        self._activated_at = None
        self._created_at = None
        self._updated_at = None
        self._invitation_sent_at = None
        self._password_changed_at = None
        self._last_login = None
        self._locked_until = None
        self._notes = None
        self._openid_name = None
        self._locale_code = None
        self._phone = None
        self._status = None
        self._state = None
        self._distinguished_name = None
        self._external_id = None
        self._directory_id = None
        self._member_of = None
        self._samaccountname = None
        self._userprincipalname = None
        self._manager_ad_id = None
        self._role_id = None
        self._custom_attributes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.email = email
        self.username = username
        self.firstname = firstname
        self.lastname = lastname
        if group_id is not None:
            self.group_id = group_id
        if invalid_login_attempts is not None:
            self.invalid_login_attempts = invalid_login_attempts
        if activated_at is not None:
            self.activated_at = activated_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if invitation_sent_at is not None:
            self.invitation_sent_at = invitation_sent_at
        if password_changed_at is not None:
            self.password_changed_at = password_changed_at
        if last_login is not None:
            self.last_login = last_login
        if locked_until is not None:
            self.locked_until = locked_until
        if notes is not None:
            self.notes = notes
        if openid_name is not None:
            self.openid_name = openid_name
        if locale_code is not None:
            self.locale_code = locale_code
        if phone is not None:
            self.phone = phone
        if status is not None:
            self.status = status
        if state is not None:
            self.state = state
        if distinguished_name is not None:
            self.distinguished_name = distinguished_name
        if external_id is not None:
            self.external_id = external_id
        if directory_id is not None:
            self.directory_id = directory_id
        if member_of is not None:
            self.member_of = member_of
        if samaccountname is not None:
            self.samaccountname = samaccountname
        if userprincipalname is not None:
            self.userprincipalname = userprincipalname
        if manager_ad_id is not None:
            self.manager_ad_id = manager_ad_id
        if role_id is not None:
            self.role_id = role_id
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        User’s unique ID in OneLogin  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        User’s unique ID in OneLogin  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        User’s email address, which he also uses to log in to OneLogin  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User’s email address, which he also uses to log in to OneLogin  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        If the user’s directory is set to authenticate using a user name value, this is the value used to sign in  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        If the user’s directory is set to authenticate using a user name value, this is the value used to sign in  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def firstname(self):
        """Gets the firstname of this User.  # noqa: E501

        User’s first name  # noqa: E501

        :return: The firstname of this User.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this User.

        User’s first name  # noqa: E501

        :param firstname: The firstname of this User.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and firstname is None:
            raise ValueError("Invalid value for `firstname`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this User.  # noqa: E501

        User’s last name  # noqa: E501

        :return: The lastname of this User.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this User.

        User’s last name  # noqa: E501

        :param lastname: The lastname of this User.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and lastname is None:
            raise ValueError("Invalid value for `lastname`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def group_id(self):
        """Gets the group_id of this User.  # noqa: E501

        Group to which the user belongs  # noqa: E501

        :return: The group_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this User.

        Group to which the user belongs  # noqa: E501

        :param group_id: The group_id of this User.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def invalid_login_attempts(self):
        """Gets the invalid_login_attempts of this User.  # noqa: E501

        Number of sequential invalid login attempts the user has made that is less than or equal to the Maximum invalid login attempts value defined on the Session page in OneLogin. When this number reaches this value, the user account will be locked for the amount of time defined by the Lock effective period field on the Session page and this value will be reset to 0.  # noqa: E501

        :return: The invalid_login_attempts of this User.  # noqa: E501
        :rtype: int
        """
        return self._invalid_login_attempts

    @invalid_login_attempts.setter
    def invalid_login_attempts(self, invalid_login_attempts):
        """Sets the invalid_login_attempts of this User.

        Number of sequential invalid login attempts the user has made that is less than or equal to the Maximum invalid login attempts value defined on the Session page in OneLogin. When this number reaches this value, the user account will be locked for the amount of time defined by the Lock effective period field on the Session page and this value will be reset to 0.  # noqa: E501

        :param invalid_login_attempts: The invalid_login_attempts of this User.  # noqa: E501
        :type: int
        """

        self._invalid_login_attempts = invalid_login_attempts

    @property
    def activated_at(self):
        """Gets the activated_at of this User.  # noqa: E501

        Date and time at which the user’s status was set to 1 (active)        # noqa: E501

        :return: The activated_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this User.

        Date and time at which the user’s status was set to 1 (active)        # noqa: E501

        :param activated_at: The activated_at of this User.  # noqa: E501
        :type: datetime
        """

        self._activated_at = activated_at

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501

        Date and time at which the user was created   # noqa: E501

        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        Date and time at which the user was created   # noqa: E501

        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501

        Date and time at which the user’s information was last updated  # noqa: E501

        :return: The updated_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.

        Date and time at which the user’s information was last updated  # noqa: E501

        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def invitation_sent_at(self):
        """Gets the invitation_sent_at of this User.  # noqa: E501

        Date and time at which an invitation to OneLogin was sent to the user   # noqa: E501

        :return: The invitation_sent_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._invitation_sent_at

    @invitation_sent_at.setter
    def invitation_sent_at(self, invitation_sent_at):
        """Sets the invitation_sent_at of this User.

        Date and time at which an invitation to OneLogin was sent to the user   # noqa: E501

        :param invitation_sent_at: The invitation_sent_at of this User.  # noqa: E501
        :type: datetime
        """

        self._invitation_sent_at = invitation_sent_at

    @property
    def password_changed_at(self):
        """Gets the password_changed_at of this User.  # noqa: E501

        Date and time at which the user’s password was last changed  # noqa: E501

        :return: The password_changed_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._password_changed_at

    @password_changed_at.setter
    def password_changed_at(self, password_changed_at):
        """Sets the password_changed_at of this User.

        Date and time at which the user’s password was last changed  # noqa: E501

        :param password_changed_at: The password_changed_at of this User.  # noqa: E501
        :type: datetime
        """

        self._password_changed_at = password_changed_at

    @property
    def last_login(self):
        """Gets the last_login of this User.  # noqa: E501

        Date and time of the user’s last login   # noqa: E501

        :return: The last_login of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.

        Date and time of the user’s last login   # noqa: E501

        :param last_login: The last_login of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def locked_until(self):
        """Gets the locked_until of this User.  # noqa: E501

        Date and time at which the user’s account will be unlocked   # noqa: E501

        :return: The locked_until of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._locked_until

    @locked_until.setter
    def locked_until(self, locked_until):
        """Sets the locked_until of this User.

        Date and time at which the user’s account will be unlocked   # noqa: E501

        :param locked_until: The locked_until of this User.  # noqa: E501
        :type: datetime
        """

        self._locked_until = locked_until

    @property
    def notes(self):
        """Gets the notes of this User.  # noqa: E501


        :return: The notes of this User.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this User.


        :param notes: The notes of this User.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def openid_name(self):
        """Gets the openid_name of this User.  # noqa: E501

        OpenID URL that can be configured in other applications that accept OpenID for sign-in  # noqa: E501

        :return: The openid_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._openid_name

    @openid_name.setter
    def openid_name(self, openid_name):
        """Sets the openid_name of this User.

        OpenID URL that can be configured in other applications that accept OpenID for sign-in  # noqa: E501

        :param openid_name: The openid_name of this User.  # noqa: E501
        :type: str
        """

        self._openid_name = openid_name

    @property
    def locale_code(self):
        """Gets the locale_code of this User.  # noqa: E501

        Represents a geographical, political, or cultural region. Some features may use the locale value to tailor the display of information, such as numbers, for the user based on locale-specific customs and conventions  # noqa: E501

        :return: The locale_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._locale_code

    @locale_code.setter
    def locale_code(self, locale_code):
        """Sets the locale_code of this User.

        Represents a geographical, political, or cultural region. Some features may use the locale value to tailor the display of information, such as numbers, for the user based on locale-specific customs and conventions  # noqa: E501

        :param locale_code: The locale_code of this User.  # noqa: E501
        :type: str
        """

        self._locale_code = locale_code

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        User’s phone number  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        User’s phone number  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501

        Determines the user’s ability to log in to OneLogin    Possible values      0 - Unactivated   1 - Active Only users assigned this status can log in to OneLogin.   2 - Suspended   3 - Locked   4 - Password expired   5 - Awaiting password reset  # noqa: E501

        :return: The status of this User.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        Determines the user’s ability to log in to OneLogin    Possible values      0 - Unactivated   1 - Active Only users assigned this status can log in to OneLogin.   2 - Suspended   3 - Locked   4 - Password expired   5 - Awaiting password reset  # noqa: E501

        :param status: The status of this User.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def state(self):
        """Gets the state of this User.  # noqa: E501

        Represents the user’s stage in a process (such as user account approval). User state determines the possible statuses a user account can be in. States include 0 - Unapproved 1 - Approved 2 - Rejected 3 - Unlicensed  # noqa: E501

        :return: The state of this User.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this User.

        Represents the user’s stage in a process (such as user account approval). User state determines the possible statuses a user account can be in. States include 0 - Unapproved 1 - Approved 2 - Rejected 3 - Unlicensed  # noqa: E501

        :param state: The state of this User.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def distinguished_name(self):
        """Gets the distinguished_name of this User.  # noqa: E501

        Synchronized from Active Directory  # noqa: E501

        :return: The distinguished_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._distinguished_name

    @distinguished_name.setter
    def distinguished_name(self, distinguished_name):
        """Sets the distinguished_name of this User.

        Synchronized from Active Directory  # noqa: E501

        :param distinguished_name: The distinguished_name of this User.  # noqa: E501
        :type: str
        """

        self._distinguished_name = distinguished_name

    @property
    def external_id(self):
        """Gets the external_id of this User.  # noqa: E501

        External ID that can be used to uniquely identify the user in another system  # noqa: E501

        :return: The external_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this User.

        External ID that can be used to uniquely identify the user in another system  # noqa: E501

        :param external_id: The external_id of this User.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def directory_id(self):
        """Gets the directory_id of this User.  # noqa: E501

        ID of the directory (Active Directory, LDAP, for example) from which the user was created  # noqa: E501

        :return: The directory_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this User.

        ID of the directory (Active Directory, LDAP, for example) from which the user was created  # noqa: E501

        :param directory_id: The directory_id of this User.  # noqa: E501
        :type: int
        """

        self._directory_id = directory_id

    @property
    def member_of(self):
        """Gets the member_of of this User.  # noqa: E501

        Synchronized from Active Directory  # noqa: E501

        :return: The member_of of this User.  # noqa: E501
        :rtype: str
        """
        return self._member_of

    @member_of.setter
    def member_of(self, member_of):
        """Sets the member_of of this User.

        Synchronized from Active Directory  # noqa: E501

        :param member_of: The member_of of this User.  # noqa: E501
        :type: str
        """

        self._member_of = member_of

    @property
    def samaccountname(self):
        """Gets the samaccountname of this User.  # noqa: E501

        Synchronized from Active Directory  # noqa: E501

        :return: The samaccountname of this User.  # noqa: E501
        :rtype: str
        """
        return self._samaccountname

    @samaccountname.setter
    def samaccountname(self, samaccountname):
        """Sets the samaccountname of this User.

        Synchronized from Active Directory  # noqa: E501

        :param samaccountname: The samaccountname of this User.  # noqa: E501
        :type: str
        """

        self._samaccountname = samaccountname

    @property
    def userprincipalname(self):
        """Gets the userprincipalname of this User.  # noqa: E501

        Synchronized from Active Directory  # noqa: E501

        :return: The userprincipalname of this User.  # noqa: E501
        :rtype: str
        """
        return self._userprincipalname

    @userprincipalname.setter
    def userprincipalname(self, userprincipalname):
        """Sets the userprincipalname of this User.

        Synchronized from Active Directory  # noqa: E501

        :param userprincipalname: The userprincipalname of this User.  # noqa: E501
        :type: str
        """

        self._userprincipalname = userprincipalname

    @property
    def manager_ad_id(self):
        """Gets the manager_ad_id of this User.  # noqa: E501

        ID of the user’s manager in Active Directory  # noqa: E501

        :return: The manager_ad_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._manager_ad_id

    @manager_ad_id.setter
    def manager_ad_id(self, manager_ad_id):
        """Sets the manager_ad_id of this User.

        ID of the user’s manager in Active Directory  # noqa: E501

        :param manager_ad_id: The manager_ad_id of this User.  # noqa: E501
        :type: str
        """

        self._manager_ad_id = manager_ad_id

    @property
    def role_id(self):
        """Gets the role_id of this User.  # noqa: E501

        Role IDs to which the user is assigned  # noqa: E501

        :return: The role_id of this User.  # noqa: E501
        :rtype: list[int]
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this User.

        Role IDs to which the user is assigned  # noqa: E501

        :param role_id: The role_id of this User.  # noqa: E501
        :type: list[int]
        """

        self._role_id = role_id

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this User.  # noqa: E501

        Provides a list of custom attribute fields (also known as custom user fields) that are available for your account. The values returned correspond to the values you provided in the Shortname field when you defined the custom user field  # noqa: E501

        :return: The custom_attributes of this User.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this User.

        Provides a list of custom attribute fields (also known as custom user fields) that are available for your account. The values returned correspond to the values you provided in the Shortname field when you defined the custom user field  # noqa: E501

        :param custom_attributes: The custom_attributes of this User.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_attributes = custom_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
