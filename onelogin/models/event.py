# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'event_type_id': 'int',
        'id': 'int',
        'created_at': 'datetime',
        'user_id': 'int',
        'notes': 'str',
        'ipaddr': 'str',
        'actor_user_id': 'int',
        'assuming_acting_user_id': 'int',
        'role_id': 'int',
        'app_id': 'int',
        'group_id': 'int',
        'otp_device_id': 'int',
        'policy_id': 'int',
        'actor_system': 'str',
        'custom_message': 'str',
        'role_name': 'str',
        'app_name': 'str',
        'group_name': 'str',
        'actor_user_name': 'str',
        'user_name': 'str',
        'policy_name': 'str',
        'otp_device_name': 'str',
        'operation_name': 'str',
        'directory_sync_run_id': 'int',
        'directory_id': 'int',
        'resolution': 'str',
        'client_id': 'str',
        'resourcse_type_id': 'int',
        'error_description': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'event_type_id': 'event_type_id',
        'id': 'id',
        'created_at': 'created_at',
        'user_id': 'user_id',
        'notes': 'notes',
        'ipaddr': 'ipaddr',
        'actor_user_id': 'actor_user_id',
        'assuming_acting_user_id': 'assuming_acting_user_id',
        'role_id': 'role_id',
        'app_id': 'app_id',
        'group_id': 'group_id',
        'otp_device_id': 'otp_device_id',
        'policy_id': 'policy_id',
        'actor_system': 'actor_system',
        'custom_message': 'custom_message',
        'role_name': 'role_name',
        'app_name': 'app_name',
        'group_name': 'group_name',
        'actor_user_name': 'actor_user_name',
        'user_name': 'user_name',
        'policy_name': 'policy_name',
        'otp_device_name': 'otp_device_name',
        'operation_name': 'operation_name',
        'directory_sync_run_id': 'directory_sync_run_id',
        'directory_id': 'directory_id',
        'resolution': 'resolution',
        'client_id': 'client_id',
        'resourcse_type_id': 'resourcse_type_id',
        'error_description': 'error_description'
    }

    def __init__(self, account_id=None, event_type_id=None, id=None, created_at=None, user_id=None, notes=None, ipaddr=None, actor_user_id=None, assuming_acting_user_id=None, role_id=None, app_id=None, group_id=None, otp_device_id=None, policy_id=None, actor_system=None, custom_message=None, role_name=None, app_name=None, group_name=None, actor_user_name=None, user_name=None, policy_name=None, otp_device_name=None, operation_name=None, directory_sync_run_id=None, directory_id=None, resolution=None, client_id=None, resourcse_type_id=None, error_description=None, _configuration=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._event_type_id = None
        self._id = None
        self._created_at = None
        self._user_id = None
        self._notes = None
        self._ipaddr = None
        self._actor_user_id = None
        self._assuming_acting_user_id = None
        self._role_id = None
        self._app_id = None
        self._group_id = None
        self._otp_device_id = None
        self._policy_id = None
        self._actor_system = None
        self._custom_message = None
        self._role_name = None
        self._app_name = None
        self._group_name = None
        self._actor_user_name = None
        self._user_name = None
        self._policy_name = None
        self._otp_device_name = None
        self._operation_name = None
        self._directory_sync_run_id = None
        self._directory_id = None
        self._resolution = None
        self._client_id = None
        self._resourcse_type_id = None
        self._error_description = None
        self.discriminator = None

        self.account_id = account_id
        self.event_type_id = event_type_id
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if user_id is not None:
            self.user_id = user_id
        if notes is not None:
            self.notes = notes
        if ipaddr is not None:
            self.ipaddr = ipaddr
        if actor_user_id is not None:
            self.actor_user_id = actor_user_id
        if assuming_acting_user_id is not None:
            self.assuming_acting_user_id = assuming_acting_user_id
        if role_id is not None:
            self.role_id = role_id
        if app_id is not None:
            self.app_id = app_id
        if group_id is not None:
            self.group_id = group_id
        if otp_device_id is not None:
            self.otp_device_id = otp_device_id
        if policy_id is not None:
            self.policy_id = policy_id
        if actor_system is not None:
            self.actor_system = actor_system
        if custom_message is not None:
            self.custom_message = custom_message
        if role_name is not None:
            self.role_name = role_name
        if app_name is not None:
            self.app_name = app_name
        if group_name is not None:
            self.group_name = group_name
        if actor_user_name is not None:
            self.actor_user_name = actor_user_name
        if user_name is not None:
            self.user_name = user_name
        if policy_name is not None:
            self.policy_name = policy_name
        if otp_device_name is not None:
            self.otp_device_name = otp_device_name
        if operation_name is not None:
            self.operation_name = operation_name
        if directory_sync_run_id is not None:
            self.directory_sync_run_id = directory_sync_run_id
        if directory_id is not None:
            self.directory_id = directory_id
        if resolution is not None:
            self.resolution = resolution
        if client_id is not None:
            self.client_id = client_id
        if resourcse_type_id is not None:
            self.resourcse_type_id = resourcse_type_id
        if error_description is not None:
            self.error_description = error_description

    @property
    def account_id(self):
        """Gets the account_id of this Event.  # noqa: E501


        :return: The account_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Event.


        :param account_id: The account_id of this Event.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def event_type_id(self):
        """Gets the event_type_id of this Event.  # noqa: E501


        :return: The event_type_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this Event.


        :param event_type_id: The event_type_id of this Event.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and event_type_id is None:
            raise ValueError("Invalid value for `event_type_id`, must not be `None`")  # noqa: E501

        self._event_type_id = event_type_id

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501

        The Event ID  # noqa: E501

        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        The Event ID  # noqa: E501

        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501

        The date/time the Event was created  # noqa: E501

        :return: The created_at of this Event.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        The date/time the Event was created  # noqa: E501

        :param created_at: The created_at of this Event.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this Event.  # noqa: E501


        :return: The user_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Event.


        :param user_id: The user_id of this Event.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def notes(self):
        """Gets the notes of this Event.  # noqa: E501


        :return: The notes of this Event.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Event.


        :param notes: The notes of this Event.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def ipaddr(self):
        """Gets the ipaddr of this Event.  # noqa: E501


        :return: The ipaddr of this Event.  # noqa: E501
        :rtype: str
        """
        return self._ipaddr

    @ipaddr.setter
    def ipaddr(self, ipaddr):
        """Sets the ipaddr of this Event.


        :param ipaddr: The ipaddr of this Event.  # noqa: E501
        :type: str
        """

        self._ipaddr = ipaddr

    @property
    def actor_user_id(self):
        """Gets the actor_user_id of this Event.  # noqa: E501


        :return: The actor_user_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._actor_user_id

    @actor_user_id.setter
    def actor_user_id(self, actor_user_id):
        """Sets the actor_user_id of this Event.


        :param actor_user_id: The actor_user_id of this Event.  # noqa: E501
        :type: int
        """

        self._actor_user_id = actor_user_id

    @property
    def assuming_acting_user_id(self):
        """Gets the assuming_acting_user_id of this Event.  # noqa: E501


        :return: The assuming_acting_user_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._assuming_acting_user_id

    @assuming_acting_user_id.setter
    def assuming_acting_user_id(self, assuming_acting_user_id):
        """Sets the assuming_acting_user_id of this Event.


        :param assuming_acting_user_id: The assuming_acting_user_id of this Event.  # noqa: E501
        :type: int
        """

        self._assuming_acting_user_id = assuming_acting_user_id

    @property
    def role_id(self):
        """Gets the role_id of this Event.  # noqa: E501


        :return: The role_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this Event.


        :param role_id: The role_id of this Event.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def app_id(self):
        """Gets the app_id of this Event.  # noqa: E501


        :return: The app_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Event.


        :param app_id: The app_id of this Event.  # noqa: E501
        :type: int
        """

        self._app_id = app_id

    @property
    def group_id(self):
        """Gets the group_id of this Event.  # noqa: E501


        :return: The group_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Event.


        :param group_id: The group_id of this Event.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def otp_device_id(self):
        """Gets the otp_device_id of this Event.  # noqa: E501


        :return: The otp_device_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._otp_device_id

    @otp_device_id.setter
    def otp_device_id(self, otp_device_id):
        """Sets the otp_device_id of this Event.


        :param otp_device_id: The otp_device_id of this Event.  # noqa: E501
        :type: int
        """

        self._otp_device_id = otp_device_id

    @property
    def policy_id(self):
        """Gets the policy_id of this Event.  # noqa: E501


        :return: The policy_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this Event.


        :param policy_id: The policy_id of this Event.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def actor_system(self):
        """Gets the actor_system of this Event.  # noqa: E501


        :return: The actor_system of this Event.  # noqa: E501
        :rtype: str
        """
        return self._actor_system

    @actor_system.setter
    def actor_system(self, actor_system):
        """Sets the actor_system of this Event.


        :param actor_system: The actor_system of this Event.  # noqa: E501
        :type: str
        """

        self._actor_system = actor_system

    @property
    def custom_message(self):
        """Gets the custom_message of this Event.  # noqa: E501


        :return: The custom_message of this Event.  # noqa: E501
        :rtype: str
        """
        return self._custom_message

    @custom_message.setter
    def custom_message(self, custom_message):
        """Sets the custom_message of this Event.


        :param custom_message: The custom_message of this Event.  # noqa: E501
        :type: str
        """

        self._custom_message = custom_message

    @property
    def role_name(self):
        """Gets the role_name of this Event.  # noqa: E501


        :return: The role_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this Event.


        :param role_name: The role_name of this Event.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def app_name(self):
        """Gets the app_name of this Event.  # noqa: E501


        :return: The app_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this Event.


        :param app_name: The app_name of this Event.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def group_name(self):
        """Gets the group_name of this Event.  # noqa: E501


        :return: The group_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this Event.


        :param group_name: The group_name of this Event.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def actor_user_name(self):
        """Gets the actor_user_name of this Event.  # noqa: E501


        :return: The actor_user_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._actor_user_name

    @actor_user_name.setter
    def actor_user_name(self, actor_user_name):
        """Sets the actor_user_name of this Event.


        :param actor_user_name: The actor_user_name of this Event.  # noqa: E501
        :type: str
        """

        self._actor_user_name = actor_user_name

    @property
    def user_name(self):
        """Gets the user_name of this Event.  # noqa: E501


        :return: The user_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this Event.


        :param user_name: The user_name of this Event.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def policy_name(self):
        """Gets the policy_name of this Event.  # noqa: E501


        :return: The policy_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this Event.


        :param policy_name: The policy_name of this Event.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def otp_device_name(self):
        """Gets the otp_device_name of this Event.  # noqa: E501


        :return: The otp_device_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._otp_device_name

    @otp_device_name.setter
    def otp_device_name(self, otp_device_name):
        """Sets the otp_device_name of this Event.


        :param otp_device_name: The otp_device_name of this Event.  # noqa: E501
        :type: str
        """

        self._otp_device_name = otp_device_name

    @property
    def operation_name(self):
        """Gets the operation_name of this Event.  # noqa: E501


        :return: The operation_name of this Event.  # noqa: E501
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this Event.


        :param operation_name: The operation_name of this Event.  # noqa: E501
        :type: str
        """

        self._operation_name = operation_name

    @property
    def directory_sync_run_id(self):
        """Gets the directory_sync_run_id of this Event.  # noqa: E501


        :return: The directory_sync_run_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._directory_sync_run_id

    @directory_sync_run_id.setter
    def directory_sync_run_id(self, directory_sync_run_id):
        """Sets the directory_sync_run_id of this Event.


        :param directory_sync_run_id: The directory_sync_run_id of this Event.  # noqa: E501
        :type: int
        """

        self._directory_sync_run_id = directory_sync_run_id

    @property
    def directory_id(self):
        """Gets the directory_id of this Event.  # noqa: E501


        :return: The directory_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._directory_id

    @directory_id.setter
    def directory_id(self, directory_id):
        """Sets the directory_id of this Event.


        :param directory_id: The directory_id of this Event.  # noqa: E501
        :type: int
        """

        self._directory_id = directory_id

    @property
    def resolution(self):
        """Gets the resolution of this Event.  # noqa: E501


        :return: The resolution of this Event.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Event.


        :param resolution: The resolution of this Event.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def client_id(self):
        """Gets the client_id of this Event.  # noqa: E501


        :return: The client_id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Event.


        :param client_id: The client_id of this Event.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def resourcse_type_id(self):
        """Gets the resourcse_type_id of this Event.  # noqa: E501


        :return: The resourcse_type_id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._resourcse_type_id

    @resourcse_type_id.setter
    def resourcse_type_id(self, resourcse_type_id):
        """Sets the resourcse_type_id of this Event.


        :param resourcse_type_id: The resourcse_type_id of this Event.  # noqa: E501
        :type: int
        """

        self._resourcse_type_id = resourcse_type_id

    @property
    def error_description(self):
        """Gets the error_description of this Event.  # noqa: E501


        :return: The error_description of this Event.  # noqa: E501
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this Event.


        :param error_description: The error_description of this Event.  # noqa: E501
        :type: str
        """

        self._error_description = error_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Event):
            return True

        return self.to_dict() != other.to_dict()
