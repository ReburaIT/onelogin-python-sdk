# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class Response(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'user': 'ResponseUser',
        'return_to_url': 'str',
        'expires_at': 'str',
        'session_token': 'str',
        'state_token': 'str',
        'callback_url': 'str',
        'devices': 'list[ResponseDevices]'
    }

    attribute_map = {
        'status': 'status',
        'user': 'user',
        'return_to_url': 'return_to_url',
        'expires_at': 'expires_at',
        'session_token': 'session_token',
        'state_token': 'state_token',
        'callback_url': 'callback_url',
        'devices': 'devices'
    }

    def __init__(self, status=None, user=None, return_to_url=None, expires_at=None, session_token=None, state_token=None, callback_url=None, devices=None, _configuration=None):  # noqa: E501
        """Response - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._user = None
        self._return_to_url = None
        self._expires_at = None
        self._session_token = None
        self._state_token = None
        self._callback_url = None
        self._devices = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if user is not None:
            self.user = user
        if return_to_url is not None:
            self.return_to_url = return_to_url
        if expires_at is not None:
            self.expires_at = expires_at
        if session_token is not None:
            self.session_token = session_token
        if state_token is not None:
            self.state_token = state_token
        if callback_url is not None:
            self.callback_url = callback_url
        if devices is not None:
            self.devices = devices

    @property
    def status(self):
        """Gets the status of this Response.  # noqa: E501


        :return: The status of this Response.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Response.


        :param status: The status of this Response.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def user(self):
        """Gets the user of this Response.  # noqa: E501


        :return: The user of this Response.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Response.


        :param user: The user of this Response.  # noqa: E501
        :type: ResponseUser
        """

        self._user = user

    @property
    def return_to_url(self):
        """Gets the return_to_url of this Response.  # noqa: E501


        :return: The return_to_url of this Response.  # noqa: E501
        :rtype: str
        """
        return self._return_to_url

    @return_to_url.setter
    def return_to_url(self, return_to_url):
        """Sets the return_to_url of this Response.


        :param return_to_url: The return_to_url of this Response.  # noqa: E501
        :type: str
        """

        self._return_to_url = return_to_url

    @property
    def expires_at(self):
        """Gets the expires_at of this Response.  # noqa: E501


        :return: The expires_at of this Response.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Response.


        :param expires_at: The expires_at of this Response.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    @property
    def session_token(self):
        """Gets the session_token of this Response.  # noqa: E501


        :return: The session_token of this Response.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this Response.


        :param session_token: The session_token of this Response.  # noqa: E501
        :type: str
        """

        self._session_token = session_token

    @property
    def state_token(self):
        """Gets the state_token of this Response.  # noqa: E501


        :return: The state_token of this Response.  # noqa: E501
        :rtype: str
        """
        return self._state_token

    @state_token.setter
    def state_token(self, state_token):
        """Sets the state_token of this Response.


        :param state_token: The state_token of this Response.  # noqa: E501
        :type: str
        """

        self._state_token = state_token

    @property
    def callback_url(self):
        """Gets the callback_url of this Response.  # noqa: E501


        :return: The callback_url of this Response.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Response.


        :param callback_url: The callback_url of this Response.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    @property
    def devices(self):
        """Gets the devices of this Response.  # noqa: E501


        :return: The devices of this Response.  # noqa: E501
        :rtype: list[ResponseDevices]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this Response.


        :param devices: The devices of this Response.  # noqa: E501
        :type: list[ResponseDevices]
        """

        self._devices = devices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Response, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Response):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Response):
            return True

        return self.to_dict() != other.to_dict()
