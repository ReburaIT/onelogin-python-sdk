# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class UserLoginRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username_or_email': 'str',
        'password': 'str',
        'subdomain': 'str',
        'return_to_url': 'str',
        'ip_address': 'str',
        'browser_id': 'str'
    }

    attribute_map = {
        'username_or_email': 'username_or_email',
        'password': 'password',
        'subdomain': 'subdomain',
        'return_to_url': 'return_to_url',
        'ip_address': 'ip_address',
        'browser_id': 'browser_id'
    }

    def __init__(self, username_or_email=None, password=None, subdomain=None, return_to_url=None, ip_address=None, browser_id=None, _configuration=None):  # noqa: E501
        """UserLoginRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._username_or_email = None
        self._password = None
        self._subdomain = None
        self._return_to_url = None
        self._ip_address = None
        self._browser_id = None
        self.discriminator = None

        self.username_or_email = username_or_email
        self.password = password
        self.subdomain = subdomain
        if return_to_url is not None:
            self.return_to_url = return_to_url
        if ip_address is not None:
            self.ip_address = ip_address
        if browser_id is not None:
            self.browser_id = browser_id

    @property
    def username_or_email(self):
        """Gets the username_or_email of this UserLoginRequest.  # noqa: E501

        Set to the username or email of the user that you want to log in.  # noqa: E501

        :return: The username_or_email of this UserLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._username_or_email

    @username_or_email.setter
    def username_or_email(self, username_or_email):
        """Sets the username_or_email of this UserLoginRequest.

        Set to the username or email of the user that you want to log in.  # noqa: E501

        :param username_or_email: The username_or_email of this UserLoginRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and username_or_email is None:
            raise ValueError("Invalid value for `username_or_email`, must not be `None`")  # noqa: E501

        self._username_or_email = username_or_email

    @property
    def password(self):
        """Gets the password of this UserLoginRequest.  # noqa: E501

        Set to the password of the user that you want to log in.  # noqa: E501

        :return: The password of this UserLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserLoginRequest.

        Set to the password of the user that you want to log in.  # noqa: E501

        :param password: The password of this UserLoginRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def subdomain(self):
        """Gets the subdomain of this UserLoginRequest.  # noqa: E501

        Set to the subdomain of the user that you want to log in.  # noqa: E501

        :return: The subdomain of this UserLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this UserLoginRequest.

        Set to the subdomain of the user that you want to log in.  # noqa: E501

        :param subdomain: The subdomain of this UserLoginRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and subdomain is None:
            raise ValueError("Invalid value for `subdomain`, must not be `None`")  # noqa: E501

        self._subdomain = subdomain

    @property
    def return_to_url(self):
        """Gets the return_to_url of this UserLoginRequest.  # noqa: E501

        Leave this value blank for now. Intended for future use with multi-factor authentication functionality.  # noqa: E501

        :return: The return_to_url of this UserLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._return_to_url

    @return_to_url.setter
    def return_to_url(self, return_to_url):
        """Sets the return_to_url of this UserLoginRequest.

        Leave this value blank for now. Intended for future use with multi-factor authentication functionality.  # noqa: E501

        :param return_to_url: The return_to_url of this UserLoginRequest.  # noqa: E501
        :type: str
        """

        self._return_to_url = return_to_url

    @property
    def ip_address(self):
        """Gets the ip_address of this UserLoginRequest.  # noqa: E501

        Leave this value blank for now. Intended for future use with multi-factor authentication functionality. It will be used to set to the IP address of the user accessing your login page.  # noqa: E501

        :return: The ip_address of this UserLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this UserLoginRequest.

        Leave this value blank for now. Intended for future use with multi-factor authentication functionality. It will be used to set to the IP address of the user accessing your login page.  # noqa: E501

        :param ip_address: The ip_address of this UserLoginRequest.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def browser_id(self):
        """Gets the browser_id of this UserLoginRequest.  # noqa: E501

        Leave this value blank for now. Intended for future use with multi-factor authentication functionality. It will be used to set to the ID of the browser being used by the user to access your login page.  # noqa: E501

        :return: The browser_id of this UserLoginRequest.  # noqa: E501
        :rtype: str
        """
        return self._browser_id

    @browser_id.setter
    def browser_id(self, browser_id):
        """Sets the browser_id of this UserLoginRequest.

        Leave this value blank for now. Intended for future use with multi-factor authentication functionality. It will be used to set to the ID of the browser being used by the user to access your login page.  # noqa: E501

        :param browser_id: The browser_id of this UserLoginRequest.  # noqa: E501
        :type: str
        """

        self._browser_id = browser_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserLoginRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserLoginRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserLoginRequest):
            return True

        return self.to_dict() != other.to_dict()
