# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class MfaDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'default': 'bool',
        'state_token': 'str',
        'auth_factor_name': 'str',
        'phone_number': 'str',
        'type_display_name': 'str',
        'needs_trigger': 'bool',
        'user_display_name': 'str',
        'id': 'int'
    }

    attribute_map = {
        'active': 'active',
        'default': 'default',
        'state_token': 'state_token',
        'auth_factor_name': 'auth_factor_name',
        'phone_number': 'phone_number',
        'type_display_name': 'type_display_name',
        'needs_trigger': 'needs_trigger',
        'user_display_name': 'user_display_name',
        'id': 'id'
    }

    def __init__(self, active=None, default=None, state_token=None, auth_factor_name=None, phone_number=None, type_display_name=None, needs_trigger=None, user_display_name=None, id=None, _configuration=None):  # noqa: E501
        """MfaDevice - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._default = None
        self._state_token = None
        self._auth_factor_name = None
        self._phone_number = None
        self._type_display_name = None
        self._needs_trigger = None
        self._user_display_name = None
        self._id = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if default is not None:
            self.default = default
        if state_token is not None:
            self.state_token = state_token
        if auth_factor_name is not None:
            self.auth_factor_name = auth_factor_name
        if phone_number is not None:
            self.phone_number = phone_number
        if type_display_name is not None:
            self.type_display_name = type_display_name
        if needs_trigger is not None:
            self.needs_trigger = needs_trigger
        if user_display_name is not None:
            self.user_display_name = user_display_name
        if id is not None:
            self.id = id

    @property
    def active(self):
        """Gets the active of this MfaDevice.  # noqa: E501


        :return: The active of this MfaDevice.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this MfaDevice.


        :param active: The active of this MfaDevice.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def default(self):
        """Gets the default of this MfaDevice.  # noqa: E501


        :return: The default of this MfaDevice.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this MfaDevice.


        :param default: The default of this MfaDevice.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def state_token(self):
        """Gets the state_token of this MfaDevice.  # noqa: E501


        :return: The state_token of this MfaDevice.  # noqa: E501
        :rtype: str
        """
        return self._state_token

    @state_token.setter
    def state_token(self, state_token):
        """Sets the state_token of this MfaDevice.


        :param state_token: The state_token of this MfaDevice.  # noqa: E501
        :type: str
        """

        self._state_token = state_token

    @property
    def auth_factor_name(self):
        """Gets the auth_factor_name of this MfaDevice.  # noqa: E501


        :return: The auth_factor_name of this MfaDevice.  # noqa: E501
        :rtype: str
        """
        return self._auth_factor_name

    @auth_factor_name.setter
    def auth_factor_name(self, auth_factor_name):
        """Sets the auth_factor_name of this MfaDevice.


        :param auth_factor_name: The auth_factor_name of this MfaDevice.  # noqa: E501
        :type: str
        """

        self._auth_factor_name = auth_factor_name

    @property
    def phone_number(self):
        """Gets the phone_number of this MfaDevice.  # noqa: E501


        :return: The phone_number of this MfaDevice.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this MfaDevice.


        :param phone_number: The phone_number of this MfaDevice.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def type_display_name(self):
        """Gets the type_display_name of this MfaDevice.  # noqa: E501


        :return: The type_display_name of this MfaDevice.  # noqa: E501
        :rtype: str
        """
        return self._type_display_name

    @type_display_name.setter
    def type_display_name(self, type_display_name):
        """Sets the type_display_name of this MfaDevice.


        :param type_display_name: The type_display_name of this MfaDevice.  # noqa: E501
        :type: str
        """

        self._type_display_name = type_display_name

    @property
    def needs_trigger(self):
        """Gets the needs_trigger of this MfaDevice.  # noqa: E501


        :return: The needs_trigger of this MfaDevice.  # noqa: E501
        :rtype: bool
        """
        return self._needs_trigger

    @needs_trigger.setter
    def needs_trigger(self, needs_trigger):
        """Sets the needs_trigger of this MfaDevice.


        :param needs_trigger: The needs_trigger of this MfaDevice.  # noqa: E501
        :type: bool
        """

        self._needs_trigger = needs_trigger

    @property
    def user_display_name(self):
        """Gets the user_display_name of this MfaDevice.  # noqa: E501


        :return: The user_display_name of this MfaDevice.  # noqa: E501
        :rtype: str
        """
        return self._user_display_name

    @user_display_name.setter
    def user_display_name(self, user_display_name):
        """Sets the user_display_name of this MfaDevice.


        :param user_display_name: The user_display_name of this MfaDevice.  # noqa: E501
        :type: str
        """

        self._user_display_name = user_display_name

    @property
    def id(self):
        """Gets the id of this MfaDevice.  # noqa: E501


        :return: The id of this MfaDevice.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MfaDevice.


        :param id: The id of this MfaDevice.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MfaDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MfaDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MfaDevice):
            return True

        return self.to_dict() != other.to_dict()
