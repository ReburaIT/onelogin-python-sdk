# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class AppParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'label': 'str',
        'user_attribute_mappings': 'str',
        'user_attribute_macros': 'str',
        'attributes_transformations': 'str',
        'skip_if_blank': 'bool',
        'values': 'str',
        'default_values': 'str',
        'provisioned_entitlements': 'bool',
        'safe_entitlements_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'user_attribute_mappings': 'user_attribute_mappings',
        'user_attribute_macros': 'user_attribute_macros',
        'attributes_transformations': 'attributes_transformations',
        'skip_if_blank': 'skip_if_blank',
        'values': 'values',
        'default_values': 'default_values',
        'provisioned_entitlements': 'provisioned_entitlements',
        'safe_entitlements_enabled': 'safe_entitlements_enabled'
    }

    def __init__(self, id=None, label=None, user_attribute_mappings=None, user_attribute_macros=None, attributes_transformations=None, skip_if_blank=None, values=None, default_values=None, provisioned_entitlements=None, safe_entitlements_enabled=None, _configuration=None):  # noqa: E501
        """AppParameters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._label = None
        self._user_attribute_mappings = None
        self._user_attribute_macros = None
        self._attributes_transformations = None
        self._skip_if_blank = None
        self._values = None
        self._default_values = None
        self._provisioned_entitlements = None
        self._safe_entitlements_enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if user_attribute_mappings is not None:
            self.user_attribute_mappings = user_attribute_mappings
        if user_attribute_macros is not None:
            self.user_attribute_macros = user_attribute_macros
        if attributes_transformations is not None:
            self.attributes_transformations = attributes_transformations
        if skip_if_blank is not None:
            self.skip_if_blank = skip_if_blank
        if values is not None:
            self.values = values
        if default_values is not None:
            self.default_values = default_values
        if provisioned_entitlements is not None:
            self.provisioned_entitlements = provisioned_entitlements
        if safe_entitlements_enabled is not None:
            self.safe_entitlements_enabled = safe_entitlements_enabled

    @property
    def id(self):
        """Gets the id of this AppParameters.  # noqa: E501


        :return: The id of this AppParameters.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppParameters.


        :param id: The id of this AppParameters.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AppParameters.  # noqa: E501


        :return: The label of this AppParameters.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AppParameters.


        :param label: The label of this AppParameters.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def user_attribute_mappings(self):
        """Gets the user_attribute_mappings of this AppParameters.  # noqa: E501


        :return: The user_attribute_mappings of this AppParameters.  # noqa: E501
        :rtype: str
        """
        return self._user_attribute_mappings

    @user_attribute_mappings.setter
    def user_attribute_mappings(self, user_attribute_mappings):
        """Sets the user_attribute_mappings of this AppParameters.


        :param user_attribute_mappings: The user_attribute_mappings of this AppParameters.  # noqa: E501
        :type: str
        """

        self._user_attribute_mappings = user_attribute_mappings

    @property
    def user_attribute_macros(self):
        """Gets the user_attribute_macros of this AppParameters.  # noqa: E501


        :return: The user_attribute_macros of this AppParameters.  # noqa: E501
        :rtype: str
        """
        return self._user_attribute_macros

    @user_attribute_macros.setter
    def user_attribute_macros(self, user_attribute_macros):
        """Sets the user_attribute_macros of this AppParameters.


        :param user_attribute_macros: The user_attribute_macros of this AppParameters.  # noqa: E501
        :type: str
        """

        self._user_attribute_macros = user_attribute_macros

    @property
    def attributes_transformations(self):
        """Gets the attributes_transformations of this AppParameters.  # noqa: E501


        :return: The attributes_transformations of this AppParameters.  # noqa: E501
        :rtype: str
        """
        return self._attributes_transformations

    @attributes_transformations.setter
    def attributes_transformations(self, attributes_transformations):
        """Sets the attributes_transformations of this AppParameters.


        :param attributes_transformations: The attributes_transformations of this AppParameters.  # noqa: E501
        :type: str
        """

        self._attributes_transformations = attributes_transformations

    @property
    def skip_if_blank(self):
        """Gets the skip_if_blank of this AppParameters.  # noqa: E501


        :return: The skip_if_blank of this AppParameters.  # noqa: E501
        :rtype: bool
        """
        return self._skip_if_blank

    @skip_if_blank.setter
    def skip_if_blank(self, skip_if_blank):
        """Sets the skip_if_blank of this AppParameters.


        :param skip_if_blank: The skip_if_blank of this AppParameters.  # noqa: E501
        :type: bool
        """

        self._skip_if_blank = skip_if_blank

    @property
    def values(self):
        """Gets the values of this AppParameters.  # noqa: E501


        :return: The values of this AppParameters.  # noqa: E501
        :rtype: str
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AppParameters.


        :param values: The values of this AppParameters.  # noqa: E501
        :type: str
        """

        self._values = values

    @property
    def default_values(self):
        """Gets the default_values of this AppParameters.  # noqa: E501


        :return: The default_values of this AppParameters.  # noqa: E501
        :rtype: str
        """
        return self._default_values

    @default_values.setter
    def default_values(self, default_values):
        """Sets the default_values of this AppParameters.


        :param default_values: The default_values of this AppParameters.  # noqa: E501
        :type: str
        """

        self._default_values = default_values

    @property
    def provisioned_entitlements(self):
        """Gets the provisioned_entitlements of this AppParameters.  # noqa: E501


        :return: The provisioned_entitlements of this AppParameters.  # noqa: E501
        :rtype: bool
        """
        return self._provisioned_entitlements

    @provisioned_entitlements.setter
    def provisioned_entitlements(self, provisioned_entitlements):
        """Sets the provisioned_entitlements of this AppParameters.


        :param provisioned_entitlements: The provisioned_entitlements of this AppParameters.  # noqa: E501
        :type: bool
        """

        self._provisioned_entitlements = provisioned_entitlements

    @property
    def safe_entitlements_enabled(self):
        """Gets the safe_entitlements_enabled of this AppParameters.  # noqa: E501


        :return: The safe_entitlements_enabled of this AppParameters.  # noqa: E501
        :rtype: bool
        """
        return self._safe_entitlements_enabled

    @safe_entitlements_enabled.setter
    def safe_entitlements_enabled(self, safe_entitlements_enabled):
        """Sets the safe_entitlements_enabled of this AppParameters.


        :param safe_entitlements_enabled: The safe_entitlements_enabled of this AppParameters.  # noqa: E501
        :type: bool
        """

        self._safe_entitlements_enabled = safe_entitlements_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppParameters):
            return True

        return self.to_dict() != other.to_dict()
