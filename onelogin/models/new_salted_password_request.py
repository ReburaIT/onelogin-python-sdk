# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class NewSaltedPasswordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'str',
        'password_confirmation': 'str',
        'password_algorithm': 'str',
        'password_salt': 'str'
    }

    attribute_map = {
        'password': 'password',
        'password_confirmation': 'password_confirmation',
        'password_algorithm': 'password_algorithm',
        'password_salt': 'password_salt'
    }

    def __init__(self, password=None, password_confirmation=None, password_algorithm=None, password_salt=None, _configuration=None):  # noqa: E501
        """NewSaltedPasswordRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._password = None
        self._password_confirmation = None
        self._password_algorithm = None
        self._password_salt = None
        self.discriminator = None

        self.password = password
        self.password_confirmation = password_confirmation
        self.password_algorithm = password_algorithm
        if password_salt is not None:
            self.password_salt = password_salt

    @property
    def password(self):
        """Gets the password of this NewSaltedPasswordRequest.  # noqa: E501

        The new password   # noqa: E501

        :return: The password of this NewSaltedPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NewSaltedPasswordRequest.

        The new password   # noqa: E501

        :param password: The password of this NewSaltedPasswordRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def password_confirmation(self):
        """Gets the password_confirmation of this NewSaltedPasswordRequest.  # noqa: E501

        The new password repeated  # noqa: E501

        :return: The password_confirmation of this NewSaltedPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._password_confirmation

    @password_confirmation.setter
    def password_confirmation(self, password_confirmation):
        """Sets the password_confirmation of this NewSaltedPasswordRequest.

        The new password repeated  # noqa: E501

        :param password_confirmation: The password_confirmation of this NewSaltedPasswordRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password_confirmation is None:
            raise ValueError("Invalid value for `password_confirmation`, must not be `None`")  # noqa: E501

        self._password_confirmation = password_confirmation

    @property
    def password_algorithm(self):
        """Gets the password_algorithm of this NewSaltedPasswordRequest.  # noqa: E501

        Set to salt+sha256.  # noqa: E501

        :return: The password_algorithm of this NewSaltedPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._password_algorithm

    @password_algorithm.setter
    def password_algorithm(self, password_algorithm):
        """Sets the password_algorithm of this NewSaltedPasswordRequest.

        Set to salt+sha256.  # noqa: E501

        :param password_algorithm: The password_algorithm of this NewSaltedPasswordRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and password_algorithm is None:
            raise ValueError("Invalid value for `password_algorithm`, must not be `None`")  # noqa: E501

        self._password_algorithm = password_algorithm

    @property
    def password_salt(self):
        """Gets the password_salt of this NewSaltedPasswordRequest.  # noqa: E501

        If your password hash has been salted then you can provide the salt used in this param.  # noqa: E501

        :return: The password_salt of this NewSaltedPasswordRequest.  # noqa: E501
        :rtype: str
        """
        return self._password_salt

    @password_salt.setter
    def password_salt(self, password_salt):
        """Sets the password_salt of this NewSaltedPasswordRequest.

        If your password hash has been salted then you can provide the salt used in this param.  # noqa: E501

        :param password_salt: The password_salt of this NewSaltedPasswordRequest.  # noqa: E501
        :type: str
        """

        self._password_salt = password_salt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewSaltedPasswordRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewSaltedPasswordRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewSaltedPasswordRequest):
            return True

        return self.to_dict() != other.to_dict()
