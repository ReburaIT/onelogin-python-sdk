# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class AppConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'redirect_uri': 'str',
        'refresh_token_expiration_minutes': 'int',
        'login_url': 'str',
        'oidc_application_type': 'int',
        'token_endpoint_auth_method': 'int',
        'access_token_expiration_minutes': 'int',
        'provider_arn': 'str',
        'signature_algorithm': 'str'
    }

    attribute_map = {
        'redirect_uri': 'redirect_uri',
        'refresh_token_expiration_minutes': 'refresh_token_expiration_minutes',
        'login_url': 'login_url',
        'oidc_application_type': 'oidc_application_type',
        'token_endpoint_auth_method': 'token_endpoint_auth_method',
        'access_token_expiration_minutes': 'access_token_expiration_minutes',
        'provider_arn': 'provider_arn',
        'signature_algorithm': 'signature_algorithm'
    }

    def __init__(self, redirect_uri=None, refresh_token_expiration_minutes=None, login_url=None, oidc_application_type=None, token_endpoint_auth_method=None, access_token_expiration_minutes=None, provider_arn=None, signature_algorithm=None, _configuration=None):  # noqa: E501
        """AppConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._redirect_uri = None
        self._refresh_token_expiration_minutes = None
        self._login_url = None
        self._oidc_application_type = None
        self._token_endpoint_auth_method = None
        self._access_token_expiration_minutes = None
        self._provider_arn = None
        self._signature_algorithm = None
        self.discriminator = None

        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if refresh_token_expiration_minutes is not None:
            self.refresh_token_expiration_minutes = refresh_token_expiration_minutes
        if login_url is not None:
            self.login_url = login_url
        if oidc_application_type is not None:
            self.oidc_application_type = oidc_application_type
        if token_endpoint_auth_method is not None:
            self.token_endpoint_auth_method = token_endpoint_auth_method
        if access_token_expiration_minutes is not None:
            self.access_token_expiration_minutes = access_token_expiration_minutes
        if provider_arn is not None:
            self.provider_arn = provider_arn
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this AppConfiguration.  # noqa: E501


        :return: The redirect_uri of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this AppConfiguration.


        :param redirect_uri: The redirect_uri of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def refresh_token_expiration_minutes(self):
        """Gets the refresh_token_expiration_minutes of this AppConfiguration.  # noqa: E501


        :return: The refresh_token_expiration_minutes of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._refresh_token_expiration_minutes

    @refresh_token_expiration_minutes.setter
    def refresh_token_expiration_minutes(self, refresh_token_expiration_minutes):
        """Sets the refresh_token_expiration_minutes of this AppConfiguration.


        :param refresh_token_expiration_minutes: The refresh_token_expiration_minutes of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._refresh_token_expiration_minutes = refresh_token_expiration_minutes

    @property
    def login_url(self):
        """Gets the login_url of this AppConfiguration.  # noqa: E501


        :return: The login_url of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this AppConfiguration.


        :param login_url: The login_url of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._login_url = login_url

    @property
    def oidc_application_type(self):
        """Gets the oidc_application_type of this AppConfiguration.  # noqa: E501


        :return: The oidc_application_type of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._oidc_application_type

    @oidc_application_type.setter
    def oidc_application_type(self, oidc_application_type):
        """Sets the oidc_application_type of this AppConfiguration.


        :param oidc_application_type: The oidc_application_type of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._oidc_application_type = oidc_application_type

    @property
    def token_endpoint_auth_method(self):
        """Gets the token_endpoint_auth_method of this AppConfiguration.  # noqa: E501


        :return: The token_endpoint_auth_method of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._token_endpoint_auth_method

    @token_endpoint_auth_method.setter
    def token_endpoint_auth_method(self, token_endpoint_auth_method):
        """Sets the token_endpoint_auth_method of this AppConfiguration.


        :param token_endpoint_auth_method: The token_endpoint_auth_method of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._token_endpoint_auth_method = token_endpoint_auth_method

    @property
    def access_token_expiration_minutes(self):
        """Gets the access_token_expiration_minutes of this AppConfiguration.  # noqa: E501


        :return: The access_token_expiration_minutes of this AppConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._access_token_expiration_minutes

    @access_token_expiration_minutes.setter
    def access_token_expiration_minutes(self, access_token_expiration_minutes):
        """Sets the access_token_expiration_minutes of this AppConfiguration.


        :param access_token_expiration_minutes: The access_token_expiration_minutes of this AppConfiguration.  # noqa: E501
        :type: int
        """

        self._access_token_expiration_minutes = access_token_expiration_minutes

    @property
    def provider_arn(self):
        """Gets the provider_arn of this AppConfiguration.  # noqa: E501


        :return: The provider_arn of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._provider_arn

    @provider_arn.setter
    def provider_arn(self, provider_arn):
        """Sets the provider_arn of this AppConfiguration.


        :param provider_arn: The provider_arn of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._provider_arn = provider_arn

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this AppConfiguration.  # noqa: E501


        :return: The signature_algorithm of this AppConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this AppConfiguration.


        :param signature_algorithm: The signature_algorithm of this AppConfiguration.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AppConfiguration):
            return True

        return self.to_dict() != other.to_dict()
