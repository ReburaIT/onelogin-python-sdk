# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class UserApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'icon': 'str',
        'provisioned': 'int',
        'extension': 'bool',
        'login_id': 'str',
        'personal': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'icon': 'icon',
        'provisioned': 'provisioned',
        'extension': 'extension',
        'login_id': 'login_id',
        'personal': 'personal'
    }

    def __init__(self, id=None, name=None, icon=None, provisioned=None, extension=None, login_id=None, personal=None, _configuration=None):  # noqa: E501
        """UserApp - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._icon = None
        self._provisioned = None
        self._extension = None
        self._login_id = None
        self._personal = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if provisioned is not None:
            self.provisioned = provisioned
        if extension is not None:
            self.extension = extension
        if login_id is not None:
            self.login_id = login_id
        if personal is not None:
            self.personal = personal

    @property
    def id(self):
        """Gets the id of this UserApp.  # noqa: E501

        ID of the app that can be accessed by the user.  # noqa: E501

        :return: The id of this UserApp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserApp.

        ID of the app that can be accessed by the user.  # noqa: E501

        :param id: The id of this UserApp.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserApp.  # noqa: E501

        Constant name for the Event Type  # noqa: E501

        :return: The name of this UserApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserApp.

        Constant name for the Event Type  # noqa: E501

        :param name: The name of this UserApp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this UserApp.  # noqa: E501

        Template for the Event description   # noqa: E501

        :return: The icon of this UserApp.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this UserApp.

        Template for the Event description   # noqa: E501

        :param icon: The icon of this UserApp.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def provisioned(self):
        """Gets the provisioned of this UserApp.  # noqa: E501

        Indicates whether a username and password has been stored on the login for the app and user. Valid values are: - 0 (no) - 1 (yes)  # noqa: E501

        :return: The provisioned of this UserApp.  # noqa: E501
        :rtype: int
        """
        return self._provisioned

    @provisioned.setter
    def provisioned(self, provisioned):
        """Sets the provisioned of this UserApp.

        Indicates whether a username and password has been stored on the login for the app and user. Valid values are: - 0 (no) - 1 (yes)  # noqa: E501

        :param provisioned: The provisioned of this UserApp.  # noqa: E501
        :type: int
        """

        self._provisioned = provisioned

    @property
    def extension(self):
        """Gets the extension of this UserApp.  # noqa: E501

        Indicates whether the app requires the OneLogin browser extension to login. Valid values are: - true: The app requires the OneLogin browser extension. - false: The app does not require the OneLogin browser extension.  # noqa: E501

        :return: The extension of this UserApp.  # noqa: E501
        :rtype: bool
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this UserApp.

        Indicates whether the app requires the OneLogin browser extension to login. Valid values are: - true: The app requires the OneLogin browser extension. - false: The app does not require the OneLogin browser extension.  # noqa: E501

        :param extension: The extension of this UserApp.  # noqa: E501
        :type: bool
        """

        self._extension = extension

    @property
    def login_id(self):
        """Gets the login_id of this UserApp.  # noqa: E501

        Template for the Event description   # noqa: E501

        :return: The login_id of this UserApp.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this UserApp.

        Template for the Event description   # noqa: E501

        :param login_id: The login_id of this UserApp.  # noqa: E501
        :type: str
        """

        self._login_id = login_id

    @property
    def personal(self):
        """Gets the personal of this UserApp.  # noqa: E501

        Indicates whether the app is a user’s personal app. Valid values are: - true: The app is a user’s personal app. - false: The app is not a user’s personal app.          # noqa: E501

        :return: The personal of this UserApp.  # noqa: E501
        :rtype: bool
        """
        return self._personal

    @personal.setter
    def personal(self, personal):
        """Sets the personal of this UserApp.

        Indicates whether the app is a user’s personal app. Valid values are: - true: The app is a user’s personal app. - false: The app is not a user’s personal app.          # noqa: E501

        :param personal: The personal of this UserApp.  # noqa: E501
        :type: bool
        """

        self._personal = personal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserApp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserApp):
            return True

        return self.to_dict() != other.to_dict()
