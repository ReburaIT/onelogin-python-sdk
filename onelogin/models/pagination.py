# coding: utf-8

"""
    OneLogin API

    This is an administrative API for OneLogin customers  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onelogin.configuration import Configuration


class Pagination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'before_cursor': 'str',
        'after_cursor': 'str',
        'previous_link': 'str',
        'next_link': 'str'
    }

    attribute_map = {
        'before_cursor': 'before_cursor',
        'after_cursor': 'after_cursor',
        'previous_link': 'previous_link',
        'next_link': 'next_link'
    }

    def __init__(self, before_cursor=None, after_cursor=None, previous_link=None, next_link=None, _configuration=None):  # noqa: E501
        """Pagination - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._before_cursor = None
        self._after_cursor = None
        self._previous_link = None
        self._next_link = None
        self.discriminator = None

        if before_cursor is not None:
            self.before_cursor = before_cursor
        if after_cursor is not None:
            self.after_cursor = after_cursor
        if previous_link is not None:
            self.previous_link = previous_link
        if next_link is not None:
            self.next_link = next_link

    @property
    def before_cursor(self):
        """Gets the before_cursor of this Pagination.  # noqa: E501


        :return: The before_cursor of this Pagination.  # noqa: E501
        :rtype: str
        """
        return self._before_cursor

    @before_cursor.setter
    def before_cursor(self, before_cursor):
        """Sets the before_cursor of this Pagination.


        :param before_cursor: The before_cursor of this Pagination.  # noqa: E501
        :type: str
        """

        self._before_cursor = before_cursor

    @property
    def after_cursor(self):
        """Gets the after_cursor of this Pagination.  # noqa: E501


        :return: The after_cursor of this Pagination.  # noqa: E501
        :rtype: str
        """
        return self._after_cursor

    @after_cursor.setter
    def after_cursor(self, after_cursor):
        """Sets the after_cursor of this Pagination.


        :param after_cursor: The after_cursor of this Pagination.  # noqa: E501
        :type: str
        """

        self._after_cursor = after_cursor

    @property
    def previous_link(self):
        """Gets the previous_link of this Pagination.  # noqa: E501


        :return: The previous_link of this Pagination.  # noqa: E501
        :rtype: str
        """
        return self._previous_link

    @previous_link.setter
    def previous_link(self, previous_link):
        """Sets the previous_link of this Pagination.


        :param previous_link: The previous_link of this Pagination.  # noqa: E501
        :type: str
        """

        self._previous_link = previous_link

    @property
    def next_link(self):
        """Gets the next_link of this Pagination.  # noqa: E501


        :return: The next_link of this Pagination.  # noqa: E501
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this Pagination.


        :param next_link: The next_link of this Pagination.  # noqa: E501
        :type: str
        """

        self._next_link = next_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pagination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pagination):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pagination):
            return True

        return self.to_dict() != other.to_dict()
